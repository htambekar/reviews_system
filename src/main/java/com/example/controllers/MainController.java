package com.example.controllers;

import com.example.daos.UserDao;
import com.example.entity.User;
import com.example.repository.UserRepository;
import com.example.utils.CriteriaParser;
import com.example.utils.SearchCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Controller // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @Autowired
  private UserDao userDao;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name,
                                          @RequestParam String email,
                                          @RequestParam String firstName,
                                          @RequestParam String lastName) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    n.setDisplayName(name);
    n.setEmailAddress(email);
    n.setFirstName(firstName);
    n.setLastName(lastName);
    n.setCreatedAt(new Date());
    userRepository.save(n);

    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    List<User> allUsers = (List<User>) userRepository.findAll();
    for (User user : allUsers) {
      System.out.println(user.getFirstName());
    }

    return allUsers;
  }

  @GetMapping(path="/search")
  public @ResponseBody Iterable<User> searchUsers(@PathVariable(required=false,name="data") String data,
                                                  @RequestParam(required=false) Map<String,String> queryParams) {
    List<SearchCriteria> criteriaList = new ArrayList<>();
    queryParams.forEach((key, value) -> {
      System.out.println(String.format("%s -> %s", key, value));
      SearchCriteria searchCriteria = new SearchCriteria(key, ":", value);
      criteriaList.add(searchCriteria);
    });

    System.out.println("--------------------------------");
    if (data != null) {
      System.out.println("data is : " + data);
    }

    return userDao.searchUser(criteriaList);
  }
}


//    SearchCriteria searchCriteria1 = new SearchCriteria("firstName", ":", "Harshad");
//    SearchCriteria searchCriteria2 = new SearchCriteria("lastName", ":", "Tambekar");
//    List<SearchCriteria> list = new ArrayList<>();
//    list.add(searchCriteria1);
//    list.add(searchCriteria2);
//    return userDao.searchUser(list);

/*protected Specification<User> resolveSpecificationFromInfixExpr(String searchParameters) {
    CriteriaParser parser = new CriteriaParser();
    GenericSpecificationsBuilder<User> specBuilder = new GenericSpecificationsBuilder<>();
    return specBuilder.build(parser.parse(searchParameters), UserSpecification::new);
  }

  protected Specification<User> resolveSpecification(String searchParameters) {

    UserSpecificationsBuilder builder = new UserSpecificationsBuilder();
    String operationSetExper = Joiner.on("|")
            .join(SearchOperation.SIMPLE_OPERATION_SET);
    Pattern pattern = Pattern.compile("(\\p{Punct}?)(\\w+?)(" + operationSetExper + ")(\\p{Punct}?)(\\w+?)(\\p{Punct}?),");
    Matcher matcher = pattern.matcher(searchParameters + ",");
    while (matcher.find()) {
      builder.with(matcher.group(1), matcher.group(2), matcher.group(3), matcher.group(5), matcher.group(4), matcher.group(6));
    }
    return builder.build();
  }*/